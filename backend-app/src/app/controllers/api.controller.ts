import {
  ApiInfo,
  ApiServer,
  Context, Delete, Get, HttpResponseCreated, HttpResponseNoContent,
  HttpResponseNotFound, HttpResponseOK, Post, UseSessions, UserRequired, ValidateBody, ValidatePathParam
} from '@foal/core';

import { Todo, User } from '../entities';
import { controller } from '@foal/core';
import { AuthController } from './api';

@ApiInfo({
  title: 'Application API',
  version: '1.0.0'
})
@ApiServer({
  url: '/api'
})
@UseSessions({
  cookie: true,
  user: (id: number) => User.findOneBy({ id }),
})
export class ApiController {
  subControllers = [
    controller('/auth', AuthController)
  ];

  @Get('/todos')
  async getTodos() {
    const todos = await Todo.find();
    return new HttpResponseOK(todos);
  }

  @Post('/todos')
  @ValidateBody({
    // Every additional properties that are not defined in the "properties"
    // object should be removed.
    additionalProperties: false,
    properties: {
      // The "text" property of ctx.request.body should be a string if it exists.
      text: { type: 'string' }
    },
    // The property "text" is required.
    required: [ 'text' ],
    // The body request should be an object once parsed by the framework.
    type: 'object',
  })
  @UserRequired()
  async postTodo(ctx: Context<User>) {
    // Create a new todo with the body of the HTTP request.
    const todo = new Todo();
    todo.text = ctx.request.body.text;
    todo.author = ctx.user;

    // Save the todo in the database.
    await todo.save();

    // Return the new todo with the id generated by the database. The status is 201.
    return new HttpResponseCreated(todo);
  }

  @Delete('/todos/:id')
  @ValidatePathParam('id', { type: 'number' })
  async deleteTodo(ctx: Context<User>, { id }: {id: number}) {
    // Get the todo with the id given in the URL if it exists.
    const todo = await Todo.findOneBy({ id: id, author: {id: ctx.user.id} });

    // Return a 404 Not Found response if no such todo exists.
    if (!todo) {
      return new HttpResponseNotFound();
    }

    // Remove the todo from the database.
    await todo.remove();

    // Returns an successful empty response. The status is 204.
    return new HttpResponseNoContent();
  }


  @Post('/users/setClickedInTranslate/:userid/')
  @ValidatePathParam('userid', { type: 'number' })
  async setClickedInTranslate( ctx: Context) {
    const userid = ctx.request.params.userid;
    const user = await User.findOneBy({id: userid});
    if (user == null)
      return new HttpResponseOK();

    user.clickedInTranslate = true;
    user.save();
    return new HttpResponseOK();
  }

  @Get('/adminPanel')
  async getAdminPanel() {
    let users = await User.find();
    return new HttpResponseOK(users);
  }

  @Get('/adminPanel/users/:userid/tasks')
  @ValidatePathParam('userid', { type: 'number' })
  async getUsersTasks( ctx: Context) {
    const userid = ctx.request.params.userid;
    const tasks = await Todo.findBy({ author: { id: userid}});
    return new HttpResponseOK(tasks);
  }
}
